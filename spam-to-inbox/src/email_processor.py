"""
Processeur d'emails avec connexion IMAP et gestion proxy
G√®re la connexion s√©curis√©e et le d√©placement des emails spam
"""
import imaplib
import socket
import socks
import email
import time
import ssl
from typing import List, Dict, Optional, Tuple
import re
from logger import get_logger
from client_simulator import EmailClient

logger = get_logger(__name__)

class EmailProcessor:
    """Processeur principal pour les op√©rations IMAP"""
    
    def __init__(self, proxy_config: Dict, client: EmailClient):
        self.proxy_config = proxy_config
        self.client = client
        self.imap_conn = None
        self.connected = False
        
    def connect(self, email_addr: str, password: str, use_app_password: bool = False) -> bool:
        """
        Connexion IMAP avec proxy sticky et simulation client
        CRITIQUE: Utilise le m√™me proxy pour toute la session
        """
        try:
            logger.info(f"üîå Connexion IMAP pour {email_addr} via {self.client.name}")
            
            # Configuration proxy SOCKS5
            if self.proxy_config:
                self._setup_proxy_connection()
            
            # Connexion IMAP SSL
            self.imap_conn = imaplib.IMAP4_SSL(
                host='outlook.office365.com',
                port=993,
                ssl_context=self._get_ssl_context()
            )
            
            # Authentification
            auth_result = self._authenticate(email_addr, password, use_app_password)
            if not auth_result:
                return False
            
            # Commandes d'initialisation sp√©cifiques au client
            self._execute_client_init_commands()
            
            self.connected = True
            logger.info(f"‚úÖ Connexion IMAP r√©ussie pour {email_addr}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion IMAP {email_addr}: {e}")
            self.connected = False
            return False
    
    def _setup_proxy_connection(self):
        """Configure la connexion proxy SOCKS5 avec sticky session"""
        try:
            # Configuration SOCKS5 pour imaplib
            socks.set_default_proxy(
                socks.SOCKS5,
                self.proxy_config['host'],
                self.proxy_config['port'],
                username=self.proxy_config['user'],
                password=self.proxy_config['pass']
            )
            
            # Monkey patch socket pour utiliser SOCKS
            socket.socket = socks.socksocket
            
            logger.debug(f"üåê Proxy configur√©: {self.proxy_config['user']}@{self.proxy_config['host']}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur configuration proxy: {e}")
            raise
    
    def _get_ssl_context(self) -> ssl.SSLContext:
        """Cr√©e un contexte SSL s√©curis√©"""
        context = ssl.create_default_context()
        context.check_hostname = True
        context.verify_mode = ssl.CERT_REQUIRED
        return context
    
    def _authenticate(self, email_addr: str, password: str, use_app_password: bool) -> bool:
        """Authentification IMAP avec gestion des mots de passe d'application"""
        try:
            if use_app_password:
                logger.info(f"üîê Authentification avec mot de passe d'application")
            
            # Tentative de connexion
            result = self.imap_conn.login(email_addr, password)
            
            if result[0] == 'OK':
                logger.info(f"‚úÖ Authentification r√©ussie pour {email_addr}")
                return True
            else:
                logger.error(f"‚ùå √âchec authentification: {result[1]}")
                return False
                
        except imaplib.IMAP4.error as e:
            error_msg = str(e).lower()
            if 'authentication failed' in error_msg:
                logger.error(f"‚ùå √âchec authentification pour {email_addr}")
                if not use_app_password:
                    logger.info("üí° Tentez avec un mot de passe d'application si 2FA activ√©")
            else:
                logger.error(f"‚ùå Erreur IMAP: {e}")
            return False
    
    def _execute_client_init_commands(self):
        """Ex√©cute les commandes d'initialisation sp√©cifiques au client"""
        commands = self.client.get_imap_commands()
        
        for cmd in commands:
            try:
                if cmd.startswith('ID'):
                    # Commande ID sp√©ciale
                    result = self.imap_conn._simple_command('ID', cmd[3:])
                    logger.debug(f"üìù Commande ID ex√©cut√©e: {result}")
                else:
                    # Autres commandes
                    result = self.imap_conn._simple_command(cmd)
                    logger.debug(f"üìù Commande {cmd} ex√©cut√©e: {result}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Commande {cmd} √©chou√©e: {e}")
                # Continue m√™me si certaines commandes √©chouent
    
    def get_spam_emails(self, limit: int = 50) -> List[Dict]:
        """
        R√©cup√®re les emails du dossier spam
        Retourne une liste de dictionnaires avec m√©tadonn√©es
        """
        if not self.connected or not self.imap_conn:
            logger.error("‚ùå Pas de connexion IMAP active")
            return []
        
        try:
            # S√©lection du dossier spam (nom selon le client)
            spam_folder = self.client.get_folder_names()['spam']
            logger.info(f"üìÇ S√©lection dossier spam: {spam_folder}")
            
            result = self.imap_conn.select(spam_folder, readonly=False)
            if result[0] != 'OK':
                logger.error(f"‚ùå Impossible de s√©lectionner {spam_folder}: {result[1]}")
                return []
            
            # Recherche emails
            search_pattern = self.client.get_search_pattern()
            result = self.imap_conn.search(None, search_pattern)
            
            if result[0] != 'OK':
                logger.error(f"‚ùå Erreur recherche emails: {result[1]}")
                return []
            
            email_ids = result[1][0].decode().split()
            
            if not email_ids or email_ids == ['']:
                logger.info("üì≠ Aucun email dans le dossier spam")
                return []
            
            # Limiter le nombre d'emails
            if len(email_ids) > limit:
                logger.info(f"üìä Limitation √† {limit} emails sur {len(email_ids)} trouv√©s")
                email_ids = email_ids[-limit:]  # Prendre les plus r√©cents
            
            logger.info(f"üìß {len(email_ids)} emails spam trouv√©s")
            
            # R√©cup√©ration m√©tadonn√©es
            emails = self._fetch_email_metadata(email_ids)
            
            return emails
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration spam: {e}")
            return []
    
    def _fetch_email_metadata(self, email_ids: List[str]) -> List[Dict]:
        """R√©cup√®re les m√©tadonn√©es des emails"""
        emails = []
        
        for email_id in email_ids:
            try:
                # R√©cup√©ration headers principaux
                result = self.imap_conn.fetch(email_id, '(ENVELOPE INTERNALDATE RFC822.SIZE FLAGS)')
                
                if result[0] != 'OK':
                    logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer email {email_id}")
                    continue
                
                # Parse des donn√©es
                email_data = {
                    'id': email_id,
                    'raw_data': result[1][0],
                    'size': self._extract_size_from_response(result[1][0]),
                    'flags': self._extract_flags_from_response(result[1][0])
                }
                
                emails.append(email_data)
                
                # D√©lai anti-d√©tection
                time.sleep(0.1)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur r√©cup√©ration email {email_id}: {e}")
                continue
        
        logger.info(f"üìä {len(emails)} emails m√©tadonn√©es r√©cup√©r√©es")
        return emails
    
    def _extract_size_from_response(self, response) -> int:
        """Extrait la taille d'un email depuis la r√©ponse IMAP"""
        try:
            response_str = str(response)
            size_match = re.search(r'RFC822\.SIZE (\d+)', response_str)
            return int(size_match.group(1)) if size_match else 0
        except:
            return 0
    
    def _extract_flags_from_response(self, response) -> List[str]:
        """Extrait les flags d'un email depuis la r√©ponse IMAP"""
        try:
            response_str = str(response)
            flags_match = re.search(r'FLAGS \(([^)]+)\)', response_str)
            if flags_match:
                return flags_match.group(1).split()
            return []
        except:
            return []
    
    def move_emails_to_inbox(self, emails: List[Dict]) -> Tuple[int, int]:
        """
        D√©place les emails vers la bo√Æte de r√©ception
        Retourne (succ√®s, √©checs)
        """
        if not self.connected or not self.imap_conn:
            logger.error("‚ùå Pas de connexion IMAP active")
            return 0, len(emails)
        
        if not emails:
            logger.info("üì≠ Aucun email √† d√©placer")
            return 0, 0
        
        try:
            inbox_folder = self.client.get_folder_names()['inbox']
            success_count = 0
            fail_count = 0
            
            logger.info(f"üì§ D√©placement de {len(emails)} emails vers {inbox_folder}")
            
            for email_data in emails:
                try:
                    email_id = email_data['id']
                    
                    # Copie vers inbox
                    copy_result = self.imap_conn.copy(email_id, inbox_folder)
                    
                    if copy_result[0] == 'OK':
                        # Marquer comme supprim√© du spam
                        self.imap_conn.store(email_id, '+FLAGS', '\\Deleted')
                        success_count += 1
                        logger.debug(f"‚úÖ Email {email_id} d√©plac√© vers inbox")
                    else:
                        fail_count += 1
                        logger.warning(f"‚ö†Ô∏è √âchec d√©placement email {email_id}: {copy_result[1]}")
                    
                    # D√©lai anti-d√©tection entre chaque email
                    time.sleep(0.2)
                    
                except Exception as e:
                    fail_count += 1
                    logger.error(f"‚ùå Erreur d√©placement email {email_data.get('id', '?')}: {e}")
            
            # Expunge pour finaliser les suppressions
            if success_count > 0:
                self.imap_conn.expunge()
                logger.info(f"üóëÔ∏è Nettoyage effectu√© - {success_count} emails supprim√©s du spam")
            
            logger.info(f"üìä R√©sultat: {success_count} d√©plac√©s, {fail_count} √©checs")
            return success_count, fail_count
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©rale d√©placement: {e}")
            return 0, len(emails)
    
    def get_folder_list(self) -> List[str]:
        """Liste les dossiers disponibles"""
        if not self.connected or not self.imap_conn:
            return []
        
        try:
            result = self.imap_conn.list()
            if result[0] == 'OK':
                folders = []
                for folder_info in result[1]:
                    folder_name = folder_info.decode().split('"')[-2]
                    folders.append(folder_name)
                return folders
            return []
        except Exception as e:
            logger.error(f"‚ùå Erreur liste dossiers: {e}")
            return []
    
    def disconnect(self):
        """Ferme la connexion IMAP proprement"""
        try:
            if self.imap_conn:
                self.imap_conn.close()
                self.imap_conn.logout()
                logger.info("üîå D√©connexion IMAP propre")
            self.connected = False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la d√©connexion: {e}")
        finally:
            self.imap_conn = None
            self.connected = False
    
    def __enter__(self):
        """Support context manager"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Support context manager"""
        self.disconnect()

def test_email_processor():
    """Test simple du processeur email"""
    print("üß™ Test processeur email...")
    
    from client_simulator import ClientSimulator
    
    simulator = ClientSimulator()
    client = simulator.get_client_by_name("Outlook Desktop Windows")
    
    proxy_config = {
        'host': 'test.proxy.com',
        'port': 1080,
        'user': 'test-session-abc123',
        'pass': 'testpass'
    }
    
    processor = EmailProcessor(proxy_config, client)
    
    print(f"‚úÖ Processeur cr√©√© avec client: {client.name}")
    print("‚ö†Ô∏è Test connexion n√©cessite vraies credentials")
    print("‚úÖ Test processeur email basique pass√©!")

if __name__ == "__main__":
    test_email_processor()